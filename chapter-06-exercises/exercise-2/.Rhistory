lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lytic,1,13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- lytic.substr(1,13)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric,1,13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lytic,nchar(fruits),nchar(fruits)-15)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric,nchar(lyric),nchar(lyric)-15)
nchar(lyric)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric,nchar(lyric)-15,nchar(lyric))
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric,nchar(lyric)-16,nchar(lyric))
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric,nchar(lyric)-14,nchar(lyric))
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric,15,nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(a,ee,lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a","ee",lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a","o",lyric)
source('~/OneDrive/Classes/INFO 201 A&AG/book-exercises/chapter-06-exercises/exercise-2/exercise.R')
source('~/OneDrive/Classes/INFO 201 A&AG/book-exercises/chapter-06-exercises/exercise-2/exercise.R')
source('~/OneDrive/Classes/INFO 201 A&AG/book-exercises/chapter-06-exercises/exercise-2/exercise.R')
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric,1,13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric,15,nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a","ee",fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a","o",fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro,fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro,fruits_o))
say_hello("Professor Ross")
# A function that says hello to someone
say_hello <- function(name) {    greeting <- paste("Hello", name)    print(greeting) }
# A function that says hello to someone
say_hello <- function(name) {    greeting <- paste("Hello", name)    print(greeting) }
say_hello("Professor Ross")
# A function that says hello to someone
say_hello <- function(name) {
greeting <- paste("Hello", name)
print(greeting) }
say_hello("Professor Ross")
say_hello(class)
say_hello("class")
say_hello("class")
make_full_name <- function(first_name, last_name) {
full_name <- paste(first_name, last_name)
return(full_name)
}
my_full_name <- make_full_name("Joel", "Ross")
survey_person <- function(my_name, option_1, option_2) {
print(paste("Hello, my name is", my_name))
print("I'm taking a survey")
print(paste("Do you prefer", option_1, "or", option_2, "?"))
#answer <- get_input_from_person() # not a real function
return(answer) }
ada_answer <- survey_person("Ada", "cats", "dogs") bob_answer <- survey_person("Bob", "cats", "dogs")
sal_answer <- survey_person("Sal", "cake", "pie") tim_answer <- survey_person("Tim", "cake", "pie")
survey_person <- function(my_name, option_1, option_2) {
print(paste("Hello, my name is", my_name))
print("I'm taking a survey")
print(paste("Do you prefer", option_1, "or", option_2, "?"))
#answer <- get_input_from_person() # not a real function
return(answer) }
ada_answer <- survey_person("Ada", "cats", "dogs")
bob_answer <- survey_person("Bob", "cats", "dogs")
sal_answer <- survey_person("Sal", "cake", "pie")
tim_answer <- survey_person("Tim", "cake", "pie")
survey_person <- function(my_name, option_1, option_2) {
print(paste("Hello, my name is", my_name))
print("I'm taking a survey")
print(paste("Do you prefer", option_1, "or", option_2, "?"))
#answer <- get_input_from_person() # not a real function
return(answer) }
ada_answer <- survey_person("Ada", "cats", "dogs")
bob_answer <- survey_person("Bob", "cats", "dogs")
sal_answer <- survey_person("Sal", "cake", "pie")
tim_answer <- survey_person("Tim", "cake", "pie")
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(input)
{
return <- input+3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(Feet,Inch)
{
return((Feet*0.3048)+(Inch*0.0254))
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters=imperial_to_metric(5,9)
dogs <- c("Fido", "Spot", "Sparky")
print(dogs)
dogs <- c("Fido", "Spot", "Sparky")
print(dogs)
dogs <- c("Fido", "Spot", "Sparky")
print(dogs)
hundred_nums <- 1:100
print(hundred_nums)
v1 <- c(3, 1, 4, 1, 5) v2 <- c(1, 6, 1, 8, 0)
v3 <- v1 + v2  # Add the vectors v4 <- v1 > v2  # Compare the vectors
v1 <- c(3, 1, 4, 1, 5)
v2 <- c(1, 6, 1, 8, 0)
v3 <- v1 + v2  # Add the vectors v4 <- v1 > v2  # Compare the vectors
v3 <- v1 + v2  # Add the vectors
v4 <- v1 > v2  # Compare the vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("John Doe","Jane Doe")
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("John Doe","Jane Doe")
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(0:49)
# Use the `length()` function to get the number of elements in `n`
print (length(n))
# Add 1 to each element in `n` and print the result
n <- n+1
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- (seq(10,1))
# Subtract `m` FROM `n`. Note the recycling!
n <- n-m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
print(seq(-5,10,0.1))
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range<-seq(-5,10,0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave*cos_wave
wave <- sin_wave*wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave*cos_wave
wave <- sin_wave+wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5,10,0.01)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave*cos_wave
wave <- sin_wave+wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5,10,0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave*cos_wave
wave <- sin_wave+wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
vowels <- c('a','e','i','o','u')
first_vowel <- vowels[1]  # "a" print(first_vowel)  # [1] "a"
fourth_vowel <- vowels[4]  # "o" print(fourth_vowel)  # [1] "o"
vowels <- c('a','e','i','o','u')
first_vowel <- vowels[1]  # "a"
print(first_vowel)  # [1] "a"
fourth_vowel <- vowels[4]  # "o"
print(fourth_vowel)  # [1] "o"
print(vowels[length(vowels)-1])
print(vowels[length(vowels)-1])
q()
